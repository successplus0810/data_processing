-- WITH filter_item AS 
-- 	(SELECT * 
-- 	, CASE 
-- 		WHEN sum(ifnull(eli_max_rate_cd,0)) OVER (PARTITION BY prmtn_comp_idnt, supplier,sku_id) != 0 THEN 'YES'
-- 		ELSE 'NO'
-- 	END FILTER_ITEM
-- 	, sum(CASE WHEN CLM_QTY IS NULL THEN 0 ELSE CLM_QTY END) OVER (PARTITION BY prmtn_comp_idnt, supplier,sku_id) CLM_QTY_ITEM
-- 	, sum(CASE WHEN PROMO_QTY IS NULL THEN 0 ELSE PROMO_QTY END) OVER (PARTITION BY prmtn_comp_idnt, supplier,sku_id) PROMO_QTY_ITEM
-- 	, sum(CASE WHEN SLS_QTY_ALL IS NULL THEN 0 ELSE SLS_QTY_ALL END) OVER (PARTITION BY prmtn_comp_idnt, supplier,sku_id) SLS_QTY_ALL_ITEM
-- 	, CASE 
-- 		WHEN sum(CASE WHEN CLM_QTY IS NULL THEN 0 ELSE CLM_QTY END) OVER (PARTITION BY prmtn_comp_idnt, supplier,sku_id) >  sum(CASE WHEN PROMO_QTY IS NULL THEN 0 ELSE PROMO_QTY END) OVER (PARTITION BY prmtn_comp_idnt, supplier,sku_id)  THEN sum(CASE WHEN SLS_QTY_ALL IS NULL THEN 0 ELSE SLS_QTY_ALL END) OVER (PARTITION BY prmtn_comp_idnt, supplier,sku_id)
-- 		ELSE sum(CASE WHEN PROMO_QTY IS NULL THEN 0 ELSE PROMO_QTY END) OVER (PARTITION BY prmtn_comp_idnt, supplier,sku_id)
-- 	END OUTPUT_QTY
-- 	FROM COLES.STI_WIP_CS.VIEW_PROMO_DETAIL_COMBINED_MERGED
-- 	WHERE 
-- 		to_char(PRMTN_COMP_DTL_END_DT,'YYYYMM') = '{}' 
-- 		-- PRMTN_COMP_DTL_END_DT between '2023-3-01' and '2023-4-30'
-- 		and PRMTN_TYPE_CDE in ('SP','TH')
-- 		AND PRM_TICKET NOT ILIKE '%down%down%'
-- 		AND PRM_TICKET NOT ILIKE '%every%day%'
-- 		-- prmtn_comp_idnt = '55591111'
-- 		and PRMTN_TYPE_CDE in ('SP','TH')
-- 		-- and  PRMTN_COMP_DTL_END_DT between '2022-1-01' and '2022-1-31'
-- 		-- prmtn_comp_idnt = '55564790'
-- 		-- AND PRMTN_COMP_IDNT NOT IN ('55887782','55779867','56106974','56069192','56106971','55805163','55807268','55871272','56159764','56361305','56176345','56190590','55978715','55807975','55871815','55890403','55980332','56208655','55822585','56011272','56011274','56011277','56011278','55823440','55921264','55807187','55977458','55805158','55921480','55807083','55921040','55921127','55805105','55920986','55921793','56160723','56160718','56160720','55807339','56157511','56159716','56180609','56159726','55889373','55920995','56210521','56159727','56410561','55848356','55871287','55871440','55889572','55979375','56113695','55848072','55871408','55920838','55848076','55871293','55871800','55890209','55921028','56141079','56141259','56141679','56142027','56142207','56143103','56143358','56143433','56143709','56143799','56144159','56228644','56229250','56229538','56229598','56229838','56230735','56231065','56231341','56231791','56269147','56269207','56270156','56270636','56271112','56271292','56271622','56271813','56272143','56272593','56272653','56272773','56292441','56292711','56293419','56294289','56295365','56295983','56296169','56296739','56297669','56297849','56298089','56277156','56277246','56277834','56278314','56278790','56279300','56279486','56279816','56280266','56280326','56280446','55848317','55871746','55872223','55890004','55890114','56248175','55980569','55984340','55847632','55921836','55978726','56058858','56058859','55847935','55848497','56211013','55978969','56368435','56386663','55847860','55879832','55871162','55871163','55871597','55871598','55871747','55871748','55871884','55871885','55889557','55889790','55890148','55891150','56147646','55890480','55921024','55921034','55921190','55921191','55921351','55921352','55921842','55922001','55922002','55921734','55978718','55978892','55979445','56147649','55871346','55956446','55848200','55920992','55921802','55847610','55847809','55848346','55848347','55848361','55871996','56002279','56003353','56212173','55889614','55889894','55890050','56002295','56003365','56212181','56002280','56003355','56212275','55979108','55979235','56003373','56166305','55848081','55946469','56155745','56155748','56217294','55977604','56155749','55848033','55921160','55922248','55871796','55921568','55847622','55871722','55890123','55921322','55978878','55910074','55910076','55977396','55979495','56219657','56224675','56241814','56391784','55847931','55847962','55921698','55807312','55871662','55847951','55890168','55921715','55848262','55871350','55908035','55908036','55889469','56017278','55921475','55977558','55864548','55871302','55848056','55871567','56014511','55971498','55848505','55921521','55922027','55978918','55979211','56166209','56166224','55847669','55847812','55847888','55848499','55871455','55890055','56209119','55889442','55921497','56111260','56209120','56170494','56170679','56170919','56170979','56171072','56171162','56171253','56171433','56171523','56171643','56171763','56171817','56171871','56174873','56174933','56175263','56175473','56175593','56175743','56176073','56216194','56216314','56242291','56242351','56242591','56242891','56243011','56243647','56243827','56243887','56243947','56244217','56244397','56244487','56244727','56244781','56290605','56290875','56291271','56291864','56292081','56293221','56293545','56293689','56293869','56294403','56294723','56294879','56295319','56295509','56302433','56302493','56302733','56302823','56303033','56303153','56303723','56303903','56303963','56304023','56304113','56304203','56304857','56329972','56330062','56296649','56296799','56297309','56297459','56297815','56298029','56298659','56298839','56298899','56299049','56299139','56300183','56300297','56330152','56330242','55848455','55890290','55921164','55847737','55847878','55920969','55847964','55889453','55889786','55977409','55848572','55891132','55890657','55890639','55921430','55848231','55979076','55848099','55913964','55977511','55848326','55847998','55821549','55848127','55977712','55847982','55848086','55848498','55871321','55871324','56104532','55889601','55889916','55921539','55922049','56209859','55978941','55979422','56205328','56102441','56102443','55848233','55920901','55848619','55978731','55978902','56155757','55977527','55847919','55847760','56018894','55921966','55848588','55847783','55848442','56160264','55979220','55848090','56179093','56179094','56374301','55978759','55847766','55730411','55732032','55910799','55889353','56087052','55847862','55848651','55978749','56002708','56017235','56017252','55848580','55979167','55848174','55890456','55978707','56093948','56093949','56157528','55848404','55872115','55921741','55871579','55921167','55921809','55753660','55851872','55847930','55977637','56186736','55919511','55848228','55871982','56327213','56355422','56365129','55977426','55847666','55890330','56209124','55847973','55848658','56217484','56028344','55848598','55977623','55848223','55922055','56017257','55905021','55871299','55871936','55921854','56176365','56320130','55848293','55872071','56196665','55921093','55921592','55921707','55921752','56106980','56106983','55871142','55890510','56052498','55889649','55977633','56176361','55871519','55921594','55871300','55871554','55872009','55872180','55780898','55921843','55871940','56261420','55872019','55872150','55889959','55890075','56186722','55920985','55978891','55871667','56206149','55921990','56206153','55871645','55871646','55921557','56149150','56205122','55871378','55871827','56232493','55978998','55871720','55872210','56211944','56282832','55871875','55890300','55921982','55871954','55921613','55871854','56002549','55871551','55871582','55921805','55872042','55921829','55979378','55871125','55978913','55871820','55871981','55921758','55977702','56111049','55871939','56111490','55871966','55920758','55921775','55871583','55872143','56014270','56014271','55871840','55871556','55871965','55872245','55922072','55979449','55956796','55871204','55921392','56210405','56210404','55871516','55872017','55921008','55871723','55871476','55872147','55921149','55872048','55922010','55871138','55921476','55871435','56265176','56310144','55889642','55979270','56264925','55871684','55871118','55810987','55871522','55871679','55872018','55978709','55871905','55977502','56304915','56178480','55889565','55979192','55889946','55977693','55889420','55921709','55978938','55889334','56144750','55978755','55889577','55890558','56280659','56299829','56286448','55889648','55889957','55890034','55889525','56321230','55890309','56102121','55890281','55956451','55978695','55889693','55889733','55890537','55890482')
-- 	),
-- check_column_filter as
-- 	(SELECT * 
-- 	,CASE  
-- 		WHEN max(CASE WHEN DNA_ACTION IS NOT NULL AND DNA_ACTION IN ('DNA') THEN 1 ELSE 0 end) OVER (PARTITION BY prmtn_comp_idnt, supplier) = 1 THEN 'DNA'
-- 		WHEN SUM(CASE WHEN CLM_QTY IS NULL THEN 0 ELSE CLM_QTY END) OVER (PARTITION BY prmtn_comp_idnt, supplier) < 0 THEN 'CLM_QTY < 0'
-- 		WHEN MAX(CASE WHEN OVERLAP_STARTDATE!= 1 THEN 0 ELSE 1 END) over (PARTITION BY prmtn_comp_idnt, supplier) + MAX(CASE WHEN OVERLAP_ENDDATE!= 1 THEN 0 ELSE 1 END) over (PARTITION BY prmtn_comp_idnt, supplier) = 0 THEN 'OVERLAP'
-- 		WHEN max(CASE WHEN PVN_CLAIM_NUMBER IS NOT NULL THEN 1 ELSE 0 END ) OVER (PARTITION BY prmtn_comp_idnt, supplier) =1 THEN 'PROFECTUS CLAIMED'
-- 		WHEN max(CASE WHEN PRGX_CLAIM_NUMBER IS NOT NULL THEN 1 ELSE 0 END ) OVER (PARTITION BY prmtn_comp_idnt, supplier)=1 THEN 'PRGX CLAIMED'
-- 		WHEN mode(ELI_MAX_RATE_CD_SUM) OVER (PARTITION BY prmtn_comp_idnt, supplier) > -300  THEN 'ELI_MAX_RATE_CD_SUM < 300'
-- 		WHEN max(ifnull(PROMO_QTY,0)) OVER (PARTITION BY prmtn_comp_idnt, supplier) = 0 THEN 'PROMO_QTY = 0'
-- 		ELSE 
-- 			CASE 
-- 				WHEN count(DISTINCT sku_id, ifnull(CLM_RATE ,0), ifnull(MAX_RATE,0), ifnull(UNIT_PRICE_TTL,0)) over(PARTITION BY prmtn_comp_idnt, supplier) = count(DISTINCT sku_id) over(PARTITION BY prmtn_comp_idnt, supplier) THEN concat('TO QA_NATIONAL_',PRMTN_TYPE_CDE,ifnull(DNA_ACTION,''),'_',CASE WHEN max( CASE WHEN CLM_QTY IS NOT NULL AND CLM_QTY != 0 THEN 1 ELSE 0 END ) OVER (PARTITION BY prmtn_comp_idnt, supplier) = 1 THEN 'WRONGRATE' ELSE 'ENTIRELY' END)
-- 				ELSE concat('TO QA_STATE_',PRMTN_TYPE_CDE,ifnull(DNA_ACTION,''),'_',CASE WHEN max( CASE WHEN CLM_QTY IS NOT NULL THEN 1 ELSE 0 END ) OVER (PARTITION BY prmtn_comp_idnt, supplier) = 1 THEN 'WRONGRATE' ELSE 'ENTIRELY' END)
-- 			END	
-- 	END check_column 
-- 	FROM filter_item
-- 	WHERE filter_item = 'YES')
-- , WRONG_RATE_SCHEMA AS
-- 	(SELECT a.*
-- 	, CASE WHEN b.CHECK_COLUMN IS NULL THEN 
-- 				CASE  
-- 					WHEN max(CASE WHEN a.DNA_ACTION IS NOT NULL AND a.DNA_ACTION IN ('DNA') THEN 1 ELSE 0 end) OVER (PARTITION BY a.prmtn_comp_idnt, a.supplier) = 1 THEN 'DNA'
-- 					WHEN SUM(CASE WHEN a.CLM_QTY IS NULL THEN 0 ELSE a.CLM_QTY END) OVER (PARTITION BY a.prmtn_comp_idnt, a.supplier) < 0 THEN 'CLM_QTY < 0'
-- 					WHEN MAX(CASE WHEN a.OVERLAP_STARTDATE!= 1 THEN 0 ELSE 1 END) over (PARTITION BY a.prmtn_comp_idnt, a.supplier) + MAX(CASE WHEN OVERLAP_ENDDATE!= 1 THEN 0 ELSE 1 END) over (PARTITION BY a.prmtn_comp_idnt, a.supplier) = 0 THEN 'OVERLAP'
-- 					WHEN max(CASE WHEN a.PVN_CLAIM_NUMBER IS NOT NULL THEN 1 ELSE 0 END ) OVER (PARTITION BY a.prmtn_comp_idnt, a.supplier) =1 THEN 'PROFECTUS CLAIMED'
-- 					WHEN max(CASE WHEN a.PRGX_CLAIM_NUMBER IS NOT NULL THEN 1 ELSE 0 END ) OVER (PARTITION BY a.prmtn_comp_idnt, a.supplier)=1 THEN 'PRGX CLAIMED'
-- 					WHEN mode(a.ELI_MAX_RATE_CD_SUM) OVER (PARTITION BY a.prmtn_comp_idnt, a.supplier) > -300  THEN 'ELI_MAX_RATE_CD_SUM < 300'
-- 					WHEN max(ifnull(a.PROMO_QTY,0)) OVER (PARTITION BY a.prmtn_comp_idnt, a.supplier) = 0 THEN 'PROMO_QTY = 0'
-- 					ELSE 'ALL_FILTER_ITEM_ARE_NO' 
-- 				END  
-- 			ELSE b.check_column 
-- 		END CHECK_COLUMN
-- 	FROM filter_item a
-- 	LEFT JOIN ( SELECT DISTINCT supplier, PRMTN_COMP_IDNT , check_column FROM check_column_filter) b
-- 		ON a.supplier = b.supplier
-- 		AND a.PRMTN_COMP_IDNT = b.PRMTN_COMP_IDNT
-- 	--WHERE check_column IS NOT NULL 
-- 	-- where a.PRMTN_COMP_IDNT  = '56026567'
-- 	ORDER BY a.PRMTN_COMP_DTL_END_DT, a.PRMTN_COMP_DTL_SDT,a.SUPPLIER ,a.PRMTN_COMP_IDNT , a.sku_id,a.STATE)
-- SELECT * FROM WRONG_RATE_SCHEMA 

-- -- WHERE check_column not ILIKE '%qa%entirely%'


-- WITH 
-- AP_DATE AS
-- 	(SELECT max(PROCESS_DTE) UPDATE_AP_DATE
-- 	FROM coles.STI_WIP_CS.AP_DEAL_CMNT_ALL )
-- ,filter_item AS 
-- 	(SELECT * 
-- 	, CASE 
-- 		WHEN sum(ifnull(eli_max_rate_cd,0)) OVER (PARTITION BY prmtn_comp_idnt, supplier,sku_id) < 0 THEN 'YES'
-- 		ELSE 'NO'
-- 	END FILTER_ITEM
-- 	, sum(CASE WHEN CLM_QTY IS NULL THEN 0 ELSE CLM_QTY END) OVER (PARTITION BY prmtn_comp_idnt, supplier,sku_id) CLM_QTY_ITEM
-- 	, sum(CASE WHEN PROMO_QTY IS NULL THEN 0 ELSE PROMO_QTY END) OVER (PARTITION BY prmtn_comp_idnt, supplier,sku_id) PROMO_QTY_ITEM
-- 	, sum(CASE WHEN SLS_QTY_ALL IS NULL THEN 0 ELSE SLS_QTY_ALL END) OVER (PARTITION BY prmtn_comp_idnt, supplier,sku_id) SLS_QTY_ALL_ITEM
-- 	, CASE 
-- 		WHEN sum(CASE WHEN CLM_QTY IS NULL THEN 0 ELSE CLM_QTY END) OVER (PARTITION BY prmtn_comp_idnt, supplier,sku_id) >  sum(CASE WHEN PROMO_QTY IS NULL THEN 0 ELSE PROMO_QTY END) OVER (PARTITION BY prmtn_comp_idnt, supplier,sku_id)  THEN sum(CASE WHEN SLS_QTY_ALL IS NULL THEN 0 ELSE SLS_QTY_ALL END) OVER (PARTITION BY prmtn_comp_idnt, supplier,sku_id)
-- 		ELSE sum(CASE WHEN PROMO_QTY IS NULL THEN 0 ELSE PROMO_QTY END) OVER (PARTITION BY prmtn_comp_idnt, supplier,sku_id)
-- 	END OUTPUT_QTY
-- 	FROM COLES.STI_WIP_CS.VIEW_PROMO_DETAIL_COMBINED_MERGED , AP_DATE
-- 	WHERE 
-- 		to_char(PRMTN_COMP_DTL_END_DT,'YYYYMM') = '202204' 
-- 		-- PRMTN_COMP_DTL_END_DT between '2023-3-01' and '2023-4-30'
-- 		and PRMTN_TYPE_CDE in ('SP','TH')
-- 		AND PRM_TICKET NOT ILIKE '%down%down%'
-- 		AND PRM_TICKET NOT ILIKE '%every%day%'
-- -- 		AND prmtn_comp_idnt = '55887782'
-- 		-- and  PRMTN_COMP_DTL_END_DT between '2022-1-01' and '2022-1-31'
-- 		-- prmtn_comp_idnt = '55564790'
-- 		-- AND PRMTN_COMP_IDNT NOT IN 
-- 	)
-- ,calculate_ELI_MAX_RATE_CD_SUM_FILTER_ITEM AS 
-- 	(SELECT * 
-- 		,sum(CASE WHEN FILTER_ITEM = 'YES' THEN ELI_MAX_RATE_CD ELSE 0 END) OVER (PARTITION BY prmtn_comp_idnt, supplier) ELI_MAX_RATE_CD_SUM_FILTER_ITEM
-- 	FROM filter_item
-- 	WHERE filter_item = 'YES'
-- 	)
-- ,check_column_filter as
-- 	(SELECT * 
-- 	,CASE  
-- 		WHEN max(CASE WHEN DNA_ACTION IS NOT NULL AND DNA_ACTION IN ('DNA') THEN 1 ELSE 0 end) OVER (PARTITION BY prmtn_comp_idnt, supplier) = 1 THEN 'DNA'
-- 		WHEN SUM(CASE WHEN CLM_QTY IS NULL THEN 0 ELSE CLM_QTY END) OVER (PARTITION BY prmtn_comp_idnt, supplier) < 0 THEN 'CLM_QTY < 0'
-- 		WHEN MAX(CASE WHEN OVERLAP_STARTDATE!= 1 THEN 0 ELSE 1 END) over (PARTITION BY prmtn_comp_idnt, supplier) + MAX(CASE WHEN OVERLAP_ENDDATE!= 1 THEN 0 ELSE 1 END) over (PARTITION BY prmtn_comp_idnt, supplier) = 0 THEN 'OVERLAP'
-- 		WHEN max(CASE WHEN PVN_CLAIM_NUMBER IS NOT NULL THEN 1 ELSE 0 END ) OVER (PARTITION BY prmtn_comp_idnt, supplier) =1 THEN 'PROFECTUS CLAIMED'
-- 		WHEN max(CASE WHEN PRGX_CLAIM_NUMBER IS NOT NULL THEN 1 ELSE 0 END ) OVER (PARTITION BY prmtn_comp_idnt, supplier)=1 THEN 'PRGX CLAIMED'
-- 		WHEN mode(ifnull(ELI_MAX_RATE_CD_SUM_FILTER_ITEM,0)) OVER (PARTITION BY prmtn_comp_idnt, supplier) > -300  THEN 'ELI_MAX_RATE_CD_SUM_FILTER_ITEM < 300'
-- 		WHEN mode(PRMTN_COMP_DTL_SDT) OVER (PARTITION BY prmtn_comp_idnt, supplier) < dateadd(YEAR,-2,getdate()::DATE) THEN 'OOS BY START DATE'
-- 		WHEN datediff(MONTH,mode(update_ap_date) OVER (PARTITION BY prmtn_comp_idnt, supplier),mode(sg_process_dte) OVER (PARTITION BY prmtn_comp_idnt, supplier)) < -3 THEN 'VEN STOP TRADING'
-- 		WHEN max(ifnull(PROMO_QTY,0)) OVER (PARTITION BY prmtn_comp_idnt, supplier) = 0 THEN 'PROMO_QTY = 0'
-- 		ELSE 
-- 			CASE 
-- 				WHEN count(DISTINCT sku_id, ifnull(CLM_RATE ,0), ifnull(MAX_RATE,0), ifnull(UNIT_PRICE_TTL,0)) over(PARTITION BY prmtn_comp_idnt, supplier) = count(DISTINCT sku_id) over(PARTITION BY prmtn_comp_idnt, supplier) THEN concat('TO QA_NATIONAL_',PRMTN_TYPE_CDE,ifnull(DNA_ACTION,''),'_',CASE WHEN max( CASE WHEN CLM_QTY IS NOT NULL AND CLM_QTY != 0 THEN 1 ELSE 0 END ) OVER (PARTITION BY prmtn_comp_idnt, supplier) = 1 THEN 'WRONGRATE' ELSE 'ENTIRELY' END)
-- 				ELSE concat('TO QA_STATE_',PRMTN_TYPE_CDE,ifnull(DNA_ACTION,''),'_',CASE WHEN max( CASE WHEN CLM_QTY IS NOT NULL THEN 1 ELSE 0 END ) OVER (PARTITION BY prmtn_comp_idnt, supplier) = 1 THEN 'WRONGRATE' ELSE 'ENTIRELY' END)
-- 			END	
-- 	END check_column
-- 	FROM calculate_ELI_MAX_RATE_CD_SUM_FILTER_ITEM
-- 	)	
-- , WRONG_RATE_SCHEMA AS
-- 	(SELECT a.*
-- 	, ifnull(b.ELI_MAX_RATE_CD_SUM_FILTER_ITEM,0) ELI_MAX_RATE_CD_SUM_FILTER_ITEM 
-- 	, CASE WHEN b.CHECK_COLUMN IS NULL THEN 
-- 				CASE  
-- 					WHEN max(CASE WHEN a.DNA_ACTION IS NOT NULL AND a.DNA_ACTION IN ('DNA') THEN 1 ELSE 0 end) OVER (PARTITION BY a.prmtn_comp_idnt, a.supplier) = 1 THEN 'DNA'
-- 					WHEN SUM(CASE WHEN a.CLM_QTY IS NULL THEN 0 ELSE a.CLM_QTY END) OVER (PARTITION BY a.prmtn_comp_idnt, a.supplier) < 0 THEN 'CLM_QTY < 0'
-- 					WHEN MAX(CASE WHEN a.OVERLAP_STARTDATE!= 1 THEN 0 ELSE 1 END) over (PARTITION BY a.prmtn_comp_idnt, a.supplier) + MAX(CASE WHEN OVERLAP_ENDDATE!= 1 THEN 0 ELSE 1 END) over (PARTITION BY a.prmtn_comp_idnt, a.supplier) = 0 THEN 'OVERLAP'
-- 					WHEN max(CASE WHEN a.PVN_CLAIM_NUMBER IS NOT NULL THEN 1 ELSE 0 END ) OVER (PARTITION BY a.prmtn_comp_idnt, a.supplier) =1 THEN 'PROFECTUS CLAIMED'
-- 					WHEN max(CASE WHEN a.PRGX_CLAIM_NUMBER IS NOT NULL THEN 1 ELSE 0 END ) OVER (PARTITION BY a.prmtn_comp_idnt, a.supplier)=1 THEN 'PRGX CLAIMED'
-- 					WHEN mode(ifnull(b.ELI_MAX_RATE_CD_SUM_FILTER_ITEM,0)) OVER (PARTITION BY a.prmtn_comp_idnt, a.supplier) > -300  THEN 'ELI_MAX_RATE_CD_SUM_FILTER_ITEM < 300'
-- 					WHEN mode(PRMTN_COMP_DTL_SDT) OVER (PARTITION BY a.prmtn_comp_idnt, a.supplier) < dateadd(YEAR,-2,getdate()::DATE) THEN 'OOS BY START DATE'
-- 					WHEN datediff(MONTH,mode(update_ap_date) OVER (PARTITION BY A.prmtn_comp_idnt, A.supplier),mode(sg_process_dte) OVER (PARTITION BY A.prmtn_comp_idnt, A.supplier)) < -3 THEN 'VEN STOP TRADING'
-- 					WHEN max(ifnull(a.PROMO_QTY,0)) OVER (PARTITION BY a.prmtn_comp_idnt, a.supplier) = 0 THEN 'PROMO_QTY = 0'
-- 					ELSE 'ALL_FILTER_ITEM_ARE_NO' 
-- 				END  
-- 			ELSE b.check_column 
-- 		END CHECK_COLUMN
-- 	FROM filter_item a
-- 	LEFT JOIN ( SELECT DISTINCT supplier, PRMTN_COMP_IDNT,ELI_MAX_RATE_CD_SUM_FILTER_ITEM , check_column FROM check_column_filter) b
-- 		ON a.supplier = b.supplier
-- 		AND a.PRMTN_COMP_IDNT = b.PRMTN_COMP_IDNT
-- 	--WHERE check_column IS NOT NULL 
-- 	-- where a.PRMTN_COMP_IDNT  = '56026567'
-- 	ORDER BY a.PRMTN_COMP_DTL_END_DT, a.PRMTN_COMP_DTL_SDT,a.SUPPLIER ,a.PRMTN_COMP_IDNT , a.sku_id,a.STATE)
-- SELECT *
-- FROM WRONG_RATE_SCHEMA
-- -- WHERE CHECK_COLUMN ILIKE  '%QA%'



WITH 
AP_DATE AS
	(SELECT max(PROCESS_DTE) UPDATE_AP_DATE
	FROM coles.STI_WIP_CS.AP_DEAL_CMNT_ALL )
,filter_item AS 
	(SELECT * 
	, CASE 
		WHEN sum(ifnull(eli_max_rate_cd,0)) OVER (PARTITION BY prmtn_comp_idnt, supplier,sku_id,dept_idnt) < 0 THEN 'YES'
		ELSE 'NO'
	END FILTER_ITEM
	, sum(CASE WHEN CLM_QTY IS NULL THEN 0 ELSE CLM_QTY END) OVER (PARTITION BY prmtn_comp_idnt, supplier,sku_id,dept_idnt) CLM_QTY_ITEM
	, sum(CASE WHEN PROMO_QTY IS NULL THEN 0 ELSE PROMO_QTY END) OVER (PARTITION BY prmtn_comp_idnt, supplier,sku_id,dept_idnt) PROMO_QTY_ITEM
	, sum(CASE WHEN SLS_QTY_ALL IS NULL THEN 0 ELSE SLS_QTY_ALL END) OVER (PARTITION BY prmtn_comp_idnt, supplier,sku_id,dept_idnt) SLS_QTY_ALL_ITEM
	, CASE 
		WHEN sum(CASE WHEN CLM_QTY IS NULL THEN 0 ELSE CLM_QTY END) OVER (PARTITION BY prmtn_comp_idnt, supplier,sku_id,dept_idnt) >  sum(CASE WHEN PROMO_QTY IS NULL THEN 0 ELSE PROMO_QTY END) OVER (PARTITION BY prmtn_comp_idnt, supplier,sku_id,dept_idnt)  THEN sum(CASE WHEN SLS_QTY_ALL IS NULL THEN 0 ELSE SLS_QTY_ALL END) OVER (PARTITION BY prmtn_comp_idnt, supplier,sku_id,dept_idnt)
		ELSE sum(CASE WHEN PROMO_QTY IS NULL THEN 0 ELSE PROMO_QTY END) OVER (PARTITION BY prmtn_comp_idnt, supplier,sku_id,dept_idnt)
	END OUTPUT_QTY
	FROM COLES.STI_WIP_CS.VIEW_PROMO_DETAIL_COMBINED_MERGED , AP_DATE
	WHERE 
		to_char(PRMTN_COMP_DTL_END_DT,'YYYYMM') = '202204' 
		-- PRMTN_COMP_DTL_END_DT between '2023-3-01' and '2023-4-30'
		and PRMTN_TYPE_CDE in ('SP','TH')
		AND PRM_TICKET NOT ILIKE '%down%down%'
		AND PRM_TICKET NOT ILIKE '%every%day%'
-- 		AND prmtn_comp_idnt = '55887782'
		-- and PRMTN_TYPE_CDE in ('SP','TH')
		-- and  PRMTN_COMP_DTL_END_DT between '2022-1-01' and '2022-1-31'
		-- prmtn_comp_idnt = '55564790'
		-- AND PRMTN_COMP_IDNT NOT IN 
	)
,calculate_ELI_MAX_RATE_CD_SUM_FILTER_ITEM AS 
	(SELECT * 
		,sum(CASE WHEN FILTER_ITEM = 'YES' THEN ELI_MAX_RATE_CD ELSE 0 END) OVER (PARTITION BY prmtn_comp_idnt,dept_idnt) ELI_MAX_RATE_CD_SUM_FILTER_ITEM
	FROM filter_item
	WHERE filter_item = 'YES'
	)
,check_column_filter as
	(SELECT * 
	,CASE  
		WHEN max(CASE WHEN DNA_ACTION IS NOT NULL AND DNA_ACTION IN ('DNA') THEN 1 ELSE 0 end) OVER (PARTITION BY prmtn_comp_idnt,dept_idnt, supplier) = 1 THEN 'DNA'
		WHEN SUM(CASE WHEN CLM_QTY IS NULL THEN 0 ELSE CLM_QTY END) OVER (PARTITION BY prmtn_comp_idnt,dept_idnt, supplier) < 0 THEN 'CLM_QTY < 0'
		WHEN MAX(CASE WHEN OVERLAP_STARTDATE!= 1 THEN 0 ELSE 1 END) over (PARTITION BY prmtn_comp_idnt,dept_idnt, supplier) + MAX(CASE WHEN OVERLAP_ENDDATE!= 1 THEN 0 ELSE 1 END) over (PARTITION BY prmtn_comp_idnt,dept_idnt, supplier) = 0 THEN 'OVERLAP'
		WHEN max(CASE WHEN PVN_CLAIM_NUMBER IS NOT NULL THEN 1 ELSE 0 END ) OVER (PARTITION BY prmtn_comp_idnt,dept_idnt, supplier) =1 THEN 'PROFECTUS CLAIMED'
		WHEN max(CASE WHEN PRGX_CLAIM_NUMBER IS NOT NULL THEN 1 ELSE 0 END ) OVER (PARTITION BY prmtn_comp_idnt,dept_idnt, supplier)=1 THEN 'PRGX CLAIMED'
		WHEN mode(ifnull(ELI_MAX_RATE_CD_SUM_FILTER_ITEM,0)) OVER (PARTITION BY prmtn_comp_idnt,dept_idnt, supplier) > -300  THEN 'ELI_MAX_RATE_CD_SUM_FILTER_ITEM < 300'
		WHEN mode(PRMTN_COMP_DTL_SDT) OVER (PARTITION BY prmtn_comp_idnt,dept_idnt, supplier) < dateadd(YEAR,-2,getdate()::DATE) THEN 'OOS BY START DATE'
		WHEN datediff(MONTH,mode(update_ap_date) OVER (PARTITION BY prmtn_comp_idnt,dept_idnt, supplier),mode(sg_process_dte) OVER (PARTITION BY prmtn_comp_idnt,dept_idnt, supplier)) < -3 THEN 'VEN STOP TRADING'
		WHEN max(ifnull(PROMO_QTY,0)) OVER (PARTITION BY prmtn_comp_idnt,dept_idnt, supplier) = 0 THEN 'PROMO_QTY = 0'
		ELSE 
			CASE 
				WHEN count(DISTINCT sku_id, ifnull(CLM_RATE ,0), ifnull(MAX_RATE,0), ifnull(UNIT_PRICE_TTL,0)) over(PARTITION BY prmtn_comp_idnt,dept_idnt, supplier) = count(DISTINCT sku_id) over(PARTITION BY prmtn_comp_idnt,dept_idnt, supplier) THEN concat('TO QA_NATIONAL_',PRMTN_TYPE_CDE,ifnull(DNA_ACTION,''),'_',CASE WHEN max( CASE WHEN CLM_QTY IS NOT NULL AND CLM_QTY != 0 THEN 1 ELSE 0 END ) OVER (PARTITION BY prmtn_comp_idnt,dept_idnt, supplier) = 1 THEN 'WRONGRATE' ELSE 'ENTIRELY' END)
				ELSE concat('TO QA_STATE_',PRMTN_TYPE_CDE,ifnull(DNA_ACTION,''),'_',CASE WHEN max( CASE WHEN CLM_QTY IS NOT NULL THEN 1 ELSE 0 END ) OVER (PARTITION BY prmtn_comp_idnt,dept_idnt, supplier) = 1 THEN 'WRONGRATE' ELSE 'ENTIRELY' END)
			END	
	END check_column
	FROM calculate_ELI_MAX_RATE_CD_SUM_FILTER_ITEM
	)	
, WRONG_RATE_SCHEMA AS
	(SELECT a.*
	, ifnull(b.ELI_MAX_RATE_CD_SUM_FILTER_ITEM,0) ELI_MAX_RATE_CD_SUM_FILTER_ITEM 
	, CASE WHEN b.CHECK_COLUMN IS NULL THEN 
				CASE  
					WHEN max(CASE WHEN a.DNA_ACTION IS NOT NULL AND a.DNA_ACTION IN ('DNA') THEN 1 ELSE 0 end) OVER (PARTITION BY a.prmtn_comp_idnt,a.dept_idnt, a.supplier) = 1 THEN 'DNA'
					WHEN SUM(CASE WHEN a.CLM_QTY IS NULL THEN 0 ELSE a.CLM_QTY END) OVER (PARTITION BY a.prmtn_comp_idnt,a.dept_idnt, a.supplier) < 0 THEN 'CLM_QTY < 0'
					WHEN MAX(CASE WHEN a.OVERLAP_STARTDATE!= 1 THEN 0 ELSE 1 END) over (PARTITION BY a.prmtn_comp_idnt,a.dept_idnt, a.supplier) + MAX(CASE WHEN OVERLAP_ENDDATE!= 1 THEN 0 ELSE 1 END) over (PARTITION BY a.prmtn_comp_idnt,a.dept_idnt, a.supplier) = 0 THEN 'OVERLAP'
					WHEN max(CASE WHEN a.PVN_CLAIM_NUMBER IS NOT NULL THEN 1 ELSE 0 END ) OVER (PARTITION BY a.prmtn_comp_idnt,a.dept_idnt, a.supplier) =1 THEN 'PROFECTUS CLAIMED'
					WHEN max(CASE WHEN a.PRGX_CLAIM_NUMBER IS NOT NULL THEN 1 ELSE 0 END ) OVER (PARTITION BY a.prmtn_comp_idnt,a.dept_idnt, a.supplier)=1 THEN 'PRGX CLAIMED'
					WHEN mode(ifnull(b.ELI_MAX_RATE_CD_SUM_FILTER_ITEM,0)) OVER (PARTITION BY a.prmtn_comp_idnt,a.dept_idnt, a.supplier) > -300  THEN 'ELI_MAX_RATE_CD_SUM_FILTER_ITEM < 300'
					WHEN mode(PRMTN_COMP_DTL_SDT) OVER (PARTITION BY a.prmtn_comp_idnt,a.dept_idnt, a.supplier) < dateadd(YEAR,-2,getdate()::DATE) THEN 'OOS BY START DATE'
					WHEN datediff(MONTH,mode(update_ap_date) OVER (PARTITION BY A.prmtn_comp_idnt,a.dept_idnt, A.supplier),mode(sg_process_dte) OVER (PARTITION BY A.prmtn_comp_idnt,a.dept_idnt, A.supplier)) < -3 THEN 'VEN STOP TRADING'
					WHEN max(ifnull(a.PROMO_QTY,0)) OVER (PARTITION BY a.prmtn_comp_idnt,a.dept_idnt, a.supplier) = 0 THEN 'PROMO_QTY = 0'
					ELSE 'ALL_FILTER_ITEM_ARE_NO' 
				END  
			ELSE b.check_column 
		END CHECK_COLUMN
	FROM filter_item a
	LEFT JOIN ( SELECT DISTINCT supplier, PRMTN_COMP_IDNT,ELI_MAX_RATE_CD_SUM_FILTER_ITEM,dept_idnt , check_column FROM check_column_filter) b
		ON a.supplier = b.supplier
		AND a.PRMTN_COMP_IDNT = b.PRMTN_COMP_IDNT
		AND a.dept_idnt = b.dept_idnt
	--WHERE check_column IS NOT NULL 
	-- where a.PRMTN_COMP_IDNT  = '56026567'
	ORDER BY a.PRMTN_COMP_DTL_END_DT, a.PRMTN_COMP_DTL_SDT,a.SUPPLIER ,a.PRMTN_COMP_IDNT , a.sku_id,a.STATE)
SELECT *
FROM WRONG_RATE_SCHEMA
-- WHERE CHECK_COLUMN ILIKE ANY ('%TO QA%','%OOS%')